Что такое Git?
Вы можете представить себе Git как «машину времени» для вашего кода. Он позволяет вам вернуться в прошлое и увидеть, как выглядел ваш код в определенный момент времени. Он также позволяет увидеть, кто и когда вносил те или иные изменения в код. Он даже позволяет отменять изменения, которые были внесены в ваш код ранее.

Репозиторий
Репозиторий Git — это хранилище, в котором расположен ваш проект и его история. Это может быть локальное хранилище где-то на вашем компьютере или удаленное хранилище на сервисе типа GitHub или другом хостинге в Интернете. Репозиторий служит для отслеживания изменений в проекте, координации работы между несколькими людьми и отслеживания истории проекта.

Коммит
Вы можете думать о коммите как о снимке вашего проекта в определенный момент времени. Правда, коммит содержит только информацию об изменениях, которые были внесены в репозиторий с момента последнего коммита. Он не содержит все файлы репозитория (если только это не первый коммит). Таким образом, каждый коммит — это небольшой кусочек истории репозитория, основанный на предыдущем коммите. Все они связаны между собой в цепочку, формируя историю изменений вашего проекта.

Ветка
Ветка — это параллельная версия репозитория. Ветки позволяют вам работать над отдельными функциями вашего проекта, не влияя на основную версию. Закончив работу над новой фичей, вы можете объединить эту ветку с основной версией проекта.


W3schools
Переменная может иметь короткое имя (например, x и y) или более описательное имя (age, carname, total_volume).

Правила для переменных Python:

Имя переменной должно начинаться с буквы или символа подчеркивания.
Имя переменной не может начинаться с цифры
Имя переменной может содержать только буквенно-цифровые символы и символы подчеркивания (Az, 0-9 и _).
Имена переменных чувствительны к регистру (возраст, Возраст и ВОЗРАСТ — это три разные переменные)
Имя переменной не может быть ни одним из ключевых слов Python .

Пример
Допустимые имена переменных:

myvar = "John"
my_var = "John"
_my_var = "John"
myVar = "John"
MYVAR = "John"
myvar2 = "John"

Распакуйте коллекцию
Если у вас есть коллекция значений в файле list, tuplePython позволяет извлекать значения в переменные. Это называется распаковкой .

Пример
Распакуйте список:

fruits = ["apple", "banana", "cherry"]
x, y, z = fruits
print(x)
print(y)
print(z)


Пример
Метод strip()удаляет все пробелы в начале и конце:

a = " Hello, World! "
print(a.strip()) # returns "Hello, World!"
